import numpy as np
import yfinance as yf
import pandas as pd
from keras.models import Sequential
from keras.layers import Dense, LSTM
from sklearn.preprocessing import MinMaxScaler
import matplotlib.pyplot as plt
# Vlad packages added 
from sklearn.cross_decomposition import PLSRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.model_selection import cross_val_predict

plt.style.use('fivethirtyeight')

#https://predictivehacks.com/predict-stock-prices-with-lstm/
HIGH_BETA = ['TSLA', 'NVDA', 'AAPL', 'BBY', 'AMZN']
MID_BETA = ['BRK-B', 'SPDR', 'CVX', 'GOOG', 'WFC' ]
LOW_BETA = ['KO', 'TM', 'PG', 'JNJ', 'WMT']
data = yf.download(LOW_BETA[0], start='2010-06-28', interval='1d', end='2022-05-19', progress=False)[['Close']]


cl = data.Close.astype('float32')
train = cl[0: int(len(cl))]
scale = MinMaxScaler()
scale.fit(train.values.reshape(-1, 1))
cl = scale.transform(cl.values.reshape(-1, 1))


def processData(data, lb):
    X, Y = [], []
    for i in range(len(data) - lb - 1):
        X.append(data[i: (i + lb), 0])
        Y.append(data[(i + lb), 0])
    return np.array(X), np.array(Y)

lb = 10
X, y = processData(cl, lb)
X_train, X_test = X[:int(X.shape[0] * 0.80)], X[int(X.shape[0] * 0.80): int(X.shape[0] * 0.90)]
y_train, y_test = y[:int(y.shape[0] * 0.80)], y[int(y.shape[0] * 0.80): int(y.shape[0] * 0.90)]

x_actual_test = X[int(X.shape[0] * 0.90):]
y_actual_test = y[int(y.shape[0] * 0.90):]


model = Sequential()
model.add(LSTM(256, input_shape=(lb, 1)))
model.add(Dense(1))

model.compile(optimizer='adam', loss = 'mse')

X_train = X_train.reshape((X_train.shape[0], X_train.shape[1], 1))
X_test = X_test.reshape((X_test.shape[0], X_test.shape[1], 1))
x_actual_test = x_actual_test.reshape((x_actual_test.shape[0], x_actual_test.shape[1], 1))
history = model.fit(X_train, y_train, epochs=300, batch_size=1, validation_data=(X_test, y_test), shuffle=False)
model.summary()

Xt = model.predict(X_train)
plt.plot(scale.inverse_transform(y_train.reshape(-1, 1)), label="Actual")
plt.plot(scale.inverse_transform(Xt), label="Predicted")
plt.legend()
plt.title("Train Dataset")
plt.figure(figsize=(12, 8))

plt.figure(figsize = (12.2, 6.5))
Xt = model.predict(X_test)
np.savetxt("predicted_price.csv", scale.inverse_transform(Xt))
plt.plot(scale.inverse_transform(y_test.reshape(-1, 1)), label="Actual")
plt.plot(scale.inverse_transform(Xt), label="Predicted")
plt.legend()
plt.title("Validation Dataset")

plt.figure(figsize = (12.2, 6.5))
Xt = model.predict(x_actual_test)
plt.plot(scale.inverse_transform(y_actual_test.reshape(-1, 1)), label="Actual")
plt.plot(scale.inverse_transform(Xt), label="Predicted")
plt.legend()
plt.title("Test Dataset")
# MASTER CODE CHUNK TO RUN 1 ENTIRE STOCK GROUP AND GET AVG PERFORMANCE

Xt = X_test


# for i in range (0,len(LOW_BETA)):
data = yf.download(LOW_BETA[i], start='2010-06-28', interval='1d', end='2022-05-19', progress=False)[['Close']]
cl = data.Close.astype('float32')
train = cl[0: int(len(cl))]
scale = MinMaxScaler()
scale.fit(train.values.reshape(-1, 1))
cl = scale.transform(cl.values.reshape(-1, 1))
lb = 10
X, y = processData(cl, lb)
X_train, X_test = X[:int(X.shape[0] * 0.80)], X[int(X.shape[0] * 0.80): int(X.shape[0] * 0.90)]
y_train, y_test = y[:int(y.shape[0] * 0.80)], y[int(y.shape[0] * 0.80): int(y.shape[0] * 0.90)]
x_actual_test = X[int(X.shape[0] * 0.90):]
y_actual_test = y[int(y.shape[0] * 0.90):]
model = Sequential()
model.add(LSTM(256, input_shape=(lb, 1)))
model.add(Dense(1))
model.compile(optimizer='adam', loss = 'mse')
X_train = X_train.reshape((X_train.shape[0], X_train.shape[1], 1))
X_test = X_test.reshape((X_test.shape[0], X_test.shape[1], 1))
x_actual_test = x_actual_test.reshape((x_actual_test.shape[0], x_actual_test.shape[1], 1))
history = model.fit(X_train, y_train, epochs=300, batch_size=32, validation_data=(X_test, y_test), shuffle=False)
Xt = model.predict(X_test)

# print(Xt)
# print(3)
